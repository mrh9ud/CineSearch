{"ast":null,"code":"import { FETCHED_RECOMMENDED_MOVIES, LOADING, FETCHED_SEARCHED_MOVIES, LOGIN_USER } from './actionType';\nconst movieRecURL = 'http://localhost:3000/movies';\nconst movieSearchURL = 'http://localhost:3000/search';\nconst userCreationURL = 'http://localhost:3000/users';\nconst userLoginURL = 'http://localhost:3000/login';\n\nfunction fetchedRecommendedMovies(recommendedMoviesArray) {\n  return {\n    type: FETCHED_RECOMMENDED_MOVIES,\n    payload: recommendedMoviesArray\n  };\n}\n\nfunction fetchedSearchedMovies(searchedMoviesArray) {\n  return {\n    type: FETCHED_SEARCHED_MOVIES,\n    payload: searchedMoviesArray\n  };\n}\n\nfunction loading() {\n  return {\n    type: LOADING\n  };\n}\n\nfunction loginUser(userObj) {\n  return {\n    type: LOGIN_USER,\n    payload: userObj\n  };\n} //Creates and login New User\n\n\nfunction createNewUser(userObj) {\n  return dispatch => {\n    let userConfigObj = {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify(userObj)\n    };\n    dispatch(loading());\n    fetch(userCreationURL, userConfigObj).then(res => res.json()).then(data => {\n      if (!data === null) {\n        dispatch(createNewUser(data));\n      } else {\n        alert(\"User already exists\");\n      }\n    });\n  };\n} //Verify and login Existing User\n\n\nfunction verifyUser(userObj) {\n  return dispatch => {\n    let userConfigObj = {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify(userObj)\n    };\n    dispatch(loading());\n    fetch(userLoginURL, userConfigObj).then(res => res.json()).then(data => {\n      if (!data === null) {\n        dispatch(loginUser(data));\n      } else {\n        alert(\"Invalid Login\");\n      }\n    });\n  };\n} //fetches recommended movies on page load\n\n\nfunction fetchingRecommendedMovies() {\n  return dispatch => {\n    dispatch(loading());\n    fetch(movieRecURL).then(res => res.json()).then(recommendedMoviesArray => {\n      dispatch(fetchedRecommendedMovies(recommendedMoviesArray));\n    });\n  };\n} //fetches movie upon user search\n\n\nfunction fetchingSearchedMovies(searchTerm) {\n  const configObj = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify({\n      searchTerm\n    })\n  };\n  return dispatch => {\n    dispatch(loading());\n    fetch(movieSearchURL, configObj).then(res => res.json()).then(searchedMoviesArray => {\n      dispatch(fetchedSearchedMovies(searchedMoviesArray));\n    });\n  };\n}\n\nexport { fetchingRecommendedMovies, fetchingSearchedMovies, createNewUser, verifyUser };","map":{"version":3,"sources":["/Users/flatironschool/Documents/mod5/CineSearch/frontend/src/redux/actionCreators.js"],"names":["FETCHED_RECOMMENDED_MOVIES","LOADING","FETCHED_SEARCHED_MOVIES","LOGIN_USER","movieRecURL","movieSearchURL","userCreationURL","userLoginURL","fetchedRecommendedMovies","recommendedMoviesArray","type","payload","fetchedSearchedMovies","searchedMoviesArray","loading","loginUser","userObj","createNewUser","dispatch","userConfigObj","method","headers","body","JSON","stringify","fetch","then","res","json","data","alert","verifyUser","fetchingRecommendedMovies","fetchingSearchedMovies","searchTerm","configObj"],"mappings":"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","sourcesContent":["import { FETCHED_RECOMMENDED_MOVIES, LOADING, FETCHED_SEARCHED_MOVIES, LOGIN_USER } from './actionType'\n\nconst movieRecURL = 'http://localhost:3000/movies'\nconst movieSearchURL ='http://localhost:3000/search'\nconst userCreationURL = 'http://localhost:3000/users'\nconst userLoginURL = 'http://localhost:3000/login'\n\nfunction fetchedRecommendedMovies(recommendedMoviesArray) {\n    return { type: FETCHED_RECOMMENDED_MOVIES, payload: recommendedMoviesArray }\n}\n\nfunction fetchedSearchedMovies(searchedMoviesArray) {\n    return { type: FETCHED_SEARCHED_MOVIES, payload: searchedMoviesArray }\n}\n\nfunction loading() {\n    return {type: LOADING}\n}\n\nfunction loginUser(userObj) {\n    return { type: LOGIN_USER, payload: userObj}\n}\n\n//Creates and login New User\nfunction createNewUser(userObj) {\n    return dispatch => {\n        let userConfigObj = {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": 'application/json'\n            },\n            body: JSON.stringify(userObj)\n        }\n        dispatch(loading())\n        fetch(userCreationURL, userConfigObj)\n        .then(res => res.json())\n        .then(data => {\n            if (!data === null) {\n                dispatch(createNewUser(data))\n            } else {\n                alert(\"User already exists\")\n            }\n        })\n    }\n}\n\n//Verify and login Existing User\nfunction verifyUser(userObj) {\n    return dispatch => {\n        let userConfigObj = {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": 'application/json'\n            },\n            body: JSON.stringify(userObj)\n        }\n\n        dispatch(loading())\n        fetch(userLoginURL, userConfigObj)\n        .then(res => res.json())\n        .then(data => {\n            if (!data === null) {\n                dispatch(loginUser(data))\n            } else {\n                alert(\"Invalid Login\")\n            }\n        })\n    }\n}\n\n//fetches recommended movies on page load\nfunction fetchingRecommendedMovies() {\n    return (dispatch) => {\n        dispatch(loading())\n        fetch(movieRecURL)\n        .then(res => res.json())\n        .then(recommendedMoviesArray => {\n            dispatch(fetchedRecommendedMovies(recommendedMoviesArray))\n        })\n    }\n}\n\n//fetches movie upon user search\nfunction fetchingSearchedMovies(searchTerm) {\n    const configObj = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            searchTerm\n        })\n    }\n    return (dispatch) => {\n        dispatch(loading())\n        fetch(movieSearchURL, configObj)\n        .then(res => res.json())\n        .then(searchedMoviesArray => {\n            dispatch(fetchedSearchedMovies(searchedMoviesArray))\n        })\n    }\n}\n\nexport { fetchingRecommendedMovies, fetchingSearchedMovies, createNewUser, verifyUser }"]},"metadata":{},"sourceType":"module"}