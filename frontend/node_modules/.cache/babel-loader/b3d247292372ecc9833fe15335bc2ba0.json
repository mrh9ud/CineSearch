{"ast":null,"code":"import { FETCHED_RECOMMENDED_MOVIES, LOADING, FETCHED_SEARCHED_MOVIES, USER_VALIDATION } from './actionType';\nconst movieRecURL = 'http://localhost:3000/movies';\nconst movieSearchURL = 'http://localhost:3000/search';\n\nfunction fetchedRecommendedMovies(recommendedMoviesArray) {\n  return {\n    type: FETCHED_RECOMMENDED_MOVIES,\n    payload: recommendedMoviesArray\n  };\n}\n\nfunction fetchedSearchedMovies(searchedMoviesArray) {\n  return {\n    type: FETCHED_SEARCHED_MOVIES,\n    payload: searchedMoviesArray\n  };\n}\n\nfunction loading() {\n  return {\n    type: LOADING\n  };\n} //VALIDATES USER\n\n\nfunction validatedUser(userObj) {\n  return {\n    type: USER_VALIDATION,\n    payload: userObj\n  };\n} //fetches recommended movies on page load\n\n\nfunction fetchingRecommendedMovies() {\n  return dispatch => {\n    dispatch(loading());\n    fetch(movieRecURL).then(res => res.json()).then(recommendedMoviesArray => {\n      dispatch(fetchedRecommendedMovies(recommendedMoviesArray));\n    });\n  };\n} //fetches movie upon user search\n\n\nfunction fetchingSearchedMovies(searchTerm) {\n  const configObj = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify({\n      searchTerm\n    })\n  };\n  return dispatch => {\n    dispatch(loading());\n    fetch(movieSearchURL, configObj).then(res => res.json()).then(searchedMoviesArray => {\n      dispatch(fetchedSearchedMovies(searchedMoviesArray));\n    });\n  };\n}\n\nexport { fetchingRecommendedMovies, fetchingSearchedMovies, validatedUser };","map":{"version":3,"sources":["/Users/flatironschool/Documents/mod5/CineSearch/frontend/src/redux/actionCreators.js"],"names":["FETCHED_RECOMMENDED_MOVIES","LOADING","FETCHED_SEARCHED_MOVIES","USER_VALIDATION","movieRecURL","movieSearchURL","fetchedRecommendedMovies","recommendedMoviesArray","type","payload","fetchedSearchedMovies","searchedMoviesArray","loading","validatedUser","userObj","fetchingRecommendedMovies","dispatch","fetch","then","res","json","fetchingSearchedMovies","searchTerm","configObj","method","headers","body","JSON","stringify"],"mappings":"AAAA,SAASA,0BAAT,EAAqCC,OAArC,EAA8CC,uBAA9C,EAAuEC,eAAvE,QAA8F,cAA9F;AAEA,MAAMC,WAAW,GAAG,8BAApB;AACA,MAAMC,cAAc,GAAE,8BAAtB;;AAEA,SAASC,wBAAT,CAAkCC,sBAAlC,EAA0D;AACtD,SAAO;AAAEC,IAAAA,IAAI,EAAER,0BAAR;AAAoCS,IAAAA,OAAO,EAAEF;AAA7C,GAAP;AACH;;AAED,SAASG,qBAAT,CAA+BC,mBAA/B,EAAoD;AAChD,SAAO;AAAEH,IAAAA,IAAI,EAAEN,uBAAR;AAAiCO,IAAAA,OAAO,EAAEE;AAA1C,GAAP;AACH;;AAED,SAASC,OAAT,GAAmB;AACf,SAAO;AAACJ,IAAAA,IAAI,EAAEP;AAAP,GAAP;AACH,C,CACD;;;AACA,SAASY,aAAT,CAAuBC,OAAvB,EAAgC;AAC5B,SAAO;AAAEN,IAAAA,IAAI,EAAEL,eAAR;AAAyBM,IAAAA,OAAO,EAAEK;AAAlC,GAAP;AACH,C,CACD;;;AACA,SAASC,yBAAT,GAAqC;AACjC,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACJ,OAAO,EAAR,CAAR;AACAK,IAAAA,KAAK,CAACb,WAAD,CAAL,CACCc,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMX,sBAAsB,IAAI;AAC5BS,MAAAA,QAAQ,CAACV,wBAAwB,CAACC,sBAAD,CAAzB,CAAR;AACH,KAJD;AAKH,GAPD;AAQH,C,CACD;;;AACA,SAASc,sBAAT,CAAgCC,UAAhC,EAA4C;AACxC,QAAMC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,gBAAU;AAFL,KAFK;AAMdC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBN,MAAAA;AADiB,KAAf;AANQ,GAAlB;AAUA,SAAQN,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACJ,OAAO,EAAR,CAAR;AACAK,IAAAA,KAAK,CAACZ,cAAD,EAAiBkB,SAAjB,CAAL,CACCL,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMP,mBAAmB,IAAI;AACzBK,MAAAA,QAAQ,CAACN,qBAAqB,CAACC,mBAAD,CAAtB,CAAR;AACH,KAJD;AAKH,GAPD;AAQH;;AAID,SAASI,yBAAT,EAAoCM,sBAApC,EAA4DR,aAA5D","sourcesContent":["import { FETCHED_RECOMMENDED_MOVIES, LOADING, FETCHED_SEARCHED_MOVIES, USER_VALIDATION } from './actionType'\n\nconst movieRecURL = 'http://localhost:3000/movies'\nconst movieSearchURL ='http://localhost:3000/search'\n\nfunction fetchedRecommendedMovies(recommendedMoviesArray) {\n    return { type: FETCHED_RECOMMENDED_MOVIES, payload: recommendedMoviesArray }\n}\n\nfunction fetchedSearchedMovies(searchedMoviesArray) {\n    return { type: FETCHED_SEARCHED_MOVIES, payload: searchedMoviesArray }\n}\n\nfunction loading() {\n    return {type: LOADING}\n}\n//VALIDATES USER\nfunction validatedUser(userObj) {\n    return { type: USER_VALIDATION, payload: userObj}\n}\n//fetches recommended movies on page load\nfunction fetchingRecommendedMovies() {\n    return (dispatch) => {\n        dispatch(loading())\n        fetch(movieRecURL)\n        .then(res => res.json())\n        .then(recommendedMoviesArray => {\n            dispatch(fetchedRecommendedMovies(recommendedMoviesArray))\n        })\n    }\n}\n//fetches movie upon user search\nfunction fetchingSearchedMovies(searchTerm) {\n    const configObj = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            searchTerm\n        })\n    }\n    return (dispatch) => {\n        dispatch(loading())\n        fetch(movieSearchURL, configObj)\n        .then(res => res.json())\n        .then(searchedMoviesArray => {\n            dispatch(fetchedSearchedMovies(searchedMoviesArray))\n        })\n    }\n}\n\n\n\nexport { fetchingRecommendedMovies, fetchingSearchedMovies, validatedUser }"]},"metadata":{},"sourceType":"module"}